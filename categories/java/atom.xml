<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>Leaflare - Java</title>
    <subtitle>Blog</subtitle>
    <link href="https://leaflare.github.io/categories/java/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://leaflare.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-02-13T20:47:19+00:00</updated>
    <id>https://leaflare.github.io/categories/java/atom.xml</id>
    <entry xml:lang="zh">
        <title>vjvm note 01： ClassLoader</title>
        <published>2023-02-13T20:47:19+00:00</published>
        <updated>2023-02-13T20:47:19+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://leaflare.github.io/202302132047/" type="text/html"/>
        <id>https://leaflare.github.io/202302132047/</id>
        
        <content type="html">&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;classloader&quot;&gt;ClassLoader&lt;&#x2F;h2&gt;
&lt;p&gt;作为Java运行时环境的一部分，Java ClassLoader动态地将Java类加载到Java虚拟机中。通过在Java中使用类加载器，它不需要Java运行时系统了解文件和文件系统的情况。Java类在应用程序需要时被加载，而不是一次性加载到内存中。Java中的ClassLoader是由JRE调用的。这些ClassLoaders动态地将类加载到内存中。&lt;&#x2F;p&gt;
&lt;p&gt;在java中，有以下3种默认的类加载器:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bootstrap ClassLoader:&lt;&#x2F;strong&gt; Loads class from JRE&#x2F;lib&#x2F;rt.jar&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Extension ClassLoader:&lt;&#x2F;strong&gt; Loads class from JRE&#x2F;lib&#x2F;ext&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Application ClassLoader:&lt;&#x2F;strong&gt; Loads class from CLASSPATH environment variable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shuang-qin-wei-tuo-jia-zai-ji-zhi-parent-first&quot;&gt;双亲委托加载机制（Parent-First）&lt;&#x2F;h2&gt;
&lt;p&gt;ClassLoader委托层次模型的运作顺序是:&lt;&#x2F;p&gt;
&lt;p&gt;Application ClassLoader -&amp;gt; Extension ClassLoader -&amp;gt; Bootstrap ClassLoader&lt;&#x2F;p&gt;
&lt;p&gt;Java 默认使用了名为 parent-first 的策略：每个 loader（除 Bootstrap Loader 外）均有一个&lt;strong&gt;亲代加载器 （parent）&lt;&#x2F;strong&gt;，在搜索 class 时首先委托亲代进行搜索，找不到时才搜索自己的加载路径。 于是，各个 ClassLoader 之间就形成了如下的委托关系：&lt;&#x2F;p&gt;
&lt;img src=&quot;.\img\loader-hierarchy.png&quot; style=&quot;zoom:80%;&quot; &#x2F;&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if 需要加载的 class 已被保存在 definedClass 中：
&lt;&#x2F;span&gt;&lt;span&gt;    返回已加载的 class
&lt;&#x2F;span&gt;&lt;span&gt;else if parent 不为 null：
&lt;&#x2F;span&gt;&lt;span&gt;    使用 parent 加载 class
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if parent 未找到相应的 class：
&lt;&#x2F;span&gt;&lt;span&gt;    for searchPaths 中的每一项：
&lt;&#x2F;span&gt;&lt;span&gt;        尝试使用它来加载类，并调用 JClass 构造函数构造类
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if 所有的 searchPath 都没有找到需要加载的类：
&lt;&#x2F;span&gt;&lt;span&gt;    返回 null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在查找 class 文件时，一个 loader 可能会搜索以下两种路径：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;搜索单个目录&lt;&#x2F;p&gt;
&lt;p&gt;在指定 &lt;code&gt;&#x2F;foo&lt;&#x2F;code&gt; 为加载路径时，如果加载 &lt;code&gt;bar.A&lt;&#x2F;code&gt; 类，你应该查找 &lt;code&gt;&#x2F;foo&#x2F;bar&#x2F;A.class&lt;&#x2F;code&gt; 文件。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;单个 Jar 文件&lt;&#x2F;p&gt;
&lt;p&gt;Jar 文件事实上是一个 zip 压缩包，将多个 class 文件打包在一起。在从 &lt;code&gt;&#x2F;foo&#x2F;bar.jar&lt;&#x2F;code&gt; 中加载 &lt;code&gt;baz.B&lt;&#x2F;code&gt; 时，你应该读取该文件并搜索其中的 &lt;code&gt;baz&#x2F;B.class&lt;&#x2F;code&gt;路径。JDK 中提供了 &lt;code&gt;JarFile&lt;&#x2F;code&gt; 类来读取 jar 文件。（可以使用 &lt;code&gt;jar -tf &amp;lt;jarfile&amp;gt;&lt;&#x2F;code&gt; 查看 Jar 文件的内容）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jclassloader&quot;&gt;JClassLoader&lt;&#x2F;h2&gt;
&lt;p&gt;负责实现上述功能。&lt;&#x2F;p&gt;
&lt;p&gt;JClassLoader首先检查所请求的类是否已经被定义，如果是就返回它。如果父类加载器不是空的，它将尝试使用父类加载器来加载该类。如果失败了，它就依次尝试使用每个类的搜索路径来加载该类。&lt;&#x2F;p&gt;
&lt;p&gt;当成功找到一个类时，代码会使用DataInputStream构造一个JClass对象并缓存结果。close()方法也被实现，以便在不再需要类加载器时关闭每个类的搜索路径。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classsearchpath&quot;&gt;ClassSearchPath&lt;&#x2F;h2&gt;
&lt;p&gt;一个抽象类，为不同类型的搜索路径提供了一个通用接口，包括类文件或 JAR 文件。&lt;&#x2F;p&gt;
&lt;p&gt;该类有一个静态方法 constructSearchPath，它接收一个代表搜索类文件的路径的字符串。这个字符串使用系统的路径分隔符被分割成不同的路径，并且为每个路径创建一个 ClassSearchPath 对象。如果路径以 .jar 结尾，那么就会创建一个 JarFileSearchPath 对象，否则就会创建一个 ClassFileSearchPath 对象。&lt;&#x2F;p&gt;
&lt;p&gt;findClass 方法接收一个代表要查找的类的名称的字符串，如果找到了，则返回一个包含该类的二进制数据的 InputStream，如果没有找到，则返回 null。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dai-ma&quot;&gt;代码&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ffangli&#x2F;toyjvm&quot;&gt;ffangli&#x2F;toyjvm (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ tree src&#x2F;main&#x2F;java&#x2F;vjvm&#x2F;classloader
&lt;&#x2F;span&gt;&lt;span&gt;src&#x2F;main&#x2F;java&#x2F;vjvm&#x2F;classloader
&lt;&#x2F;span&gt;&lt;span&gt;	searchpath
&lt;&#x2F;span&gt;&lt;span&gt;		ClassSearchPath.java
&lt;&#x2F;span&gt;&lt;span&gt;        DirSearchPath.java
&lt;&#x2F;span&gt;&lt;span&gt;        JarSearchPath.java
&lt;&#x2F;span&gt;&lt;span&gt;        ModuleSearchPath.java
&lt;&#x2F;span&gt;&lt;span&gt;	JClassLoader.java
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>vjvm note 00： Basic Info</title>
        <published>2022-02-11T20:47:19+00:00</published>
        <updated>2022-02-11T20:47:19+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://leaflare.github.io/202202112047/" type="text/html"/>
        <id>https://leaflare.github.io/202202112047/</id>
        
        <content type="html">&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;toy jvm，本系列blog用于记录基本项目结构和重要的实现方法&lt;&#x2F;p&gt;
&lt;h2 id=&quot;main&quot;&gt;Main&lt;&#x2F;h2&gt;
&lt;p&gt;定义了一个实现了Callable&lt;Integer&gt;接口的Main类。Main方法创建了一个Main类的新实例，并通过将命令行参数传递给CommandLine类的execute方法来执行。&lt;&#x2F;p&gt;
&lt;p&gt;Main类使用PicoCLI库的注释定义了几个字段和选项。userClassPath字段是一个选项，指定了搜索类文件的类路径。entryClass参数指定要运行的类，args参数指定传递给Java程序的参数。dump选项指定是否要转储classfile的内容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;call&lt;&#x2F;code&gt;方法是该程序的主要逻辑入口。使用指定的userClassPath创建一个新的VMContext类的实例。如果转储（dump ）选项被启用，它使用VMContext类的userLoader方法加载指定的类，并使用转储方法转储其内容。否则，将使用VMContext类的run方法运行指定的类。&lt;&#x2F;p&gt;
&lt;p&gt;dump方法接收一个JClass对象作为输入，并使用Logger类转储其内容。该方法打印出类的名称、次要和主要版本、访问标志、本类、超类、常量池、接口、字段和方法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vmcontext&quot;&gt;VMContext&lt;&#x2F;h2&gt;
&lt;p&gt;VMContext负责为运行Java字节码设置上下文。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;bootstrapLoader：JClassLoader的一个实例，用于从Java Runtime Environment的bootstrap classpath加载类。&lt;&#x2F;li&gt;
&lt;li&gt;userLoader：JClassLoader的一个实例，用于从用户指定的classpath中加载类。&lt;&#x2F;li&gt;
&lt;li&gt;interpreter：JInterpreter的一个实例，用于解释Java字节码指令。&lt;&#x2F;li&gt;
&lt;li&gt;threads：JThread实例的列表，代表JVM中的线程。&lt;&#x2F;li&gt;
&lt;li&gt;heap：JHeap的一个实例，用于管理JVM中的内存。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;构造函数需要一个userClassPath参数，该参数用于初始化userLoader。构造函数还初始化了bootstrapLoader和解释器，并设置了堆。&lt;&#x2F;p&gt;
&lt;p&gt;run()方法需要一个 entryClass 参数，它是包含要执行的主方法的类的名称。它创建一个新的JThread实例，将其添加到线程列表中，用userLoader加载 entryClass，并找到main方法。然后，它使用解释器调用主方法。&lt;&#x2F;p&gt;
&lt;p&gt;getSystemSearchPaths() 方法返回一个代表系统 classpath 的 ClassSearchPath 实例数组，返回 ModuleSearchPath 的实例。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dai-ma&quot;&gt;代码&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ffangli&#x2F;toyjvm&quot;&gt;ffangli&#x2F;toyjvm (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Java版本问题处理合集</title>
        <published>2021-11-12T16:13:14+00:00</published>
        <updated>2021-11-12T16:13:14+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://leaflare.github.io/202111121613/" type="text/html"/>
        <id>https://leaflare.github.io/202111121613/</id>
        
        <content type="html">&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;h2 id=&quot;bu-yi-zhi-bao-cuo&quot;&gt;不一致报错&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;a-jni-error-has-occurred-please-check-your-installation-and-try-again&quot;&gt;A JNI error has occurred, please check your installation and try again&lt;&#x2F;h3&gt;
&lt;p&gt;javac与java版本不同所致&lt;&#x2F;p&gt;
&lt;p&gt;检查&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;javac -version
&lt;&#x2F;span&gt;&lt;span&gt;java -version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在环境变量Path变量中将需要使用的路径上移，例如将&lt;code&gt;%JAVA_HOME%\bin&lt;&#x2F;code&gt;路径移至&lt;code&gt;C:\Program Files (x86)\Common Files\Oracle\Java\javapath&lt;&#x2F;code&gt;之上&lt;&#x2F;p&gt;
&lt;p&gt;这个时候在idea运行之前的项目还是会有报错，需要手动换SDK&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
